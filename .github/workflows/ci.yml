name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  DOCKER_IMAGE_NAME: smartrent-scraper
  NODE_VERSION: "20.18.1"

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci

    - name: Generate Prisma Client
      run: |
        npm run db:generate

    - name: Run code quality checks
      run: |
        # Linting
        npm run lint

        # Type checking
        npx tsc --noEmit

  test:
    runs-on: ubuntu-latest
    needs: lint

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: smartrent_scraper_test
        ports:
        - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci

    - name: Generate Prisma Client
      run: |
        npm run db:generate

    - name: Set up test database
      env:
        DATABASE_URL: mysql://root:test_password@localhost:3306/smartrent_scraper_test
      run: |
        npx prisma db push

    - name: Run unit tests
      env:
        DATABASE_URL: mysql://root:test_password@localhost:3306/smartrent_scraper_test
        NODE_ENV: test
      run: |
        npm test -- --coverage --coverageDirectory=coverage --coverageReporters=xml,html,text

    - name: Check coverage threshold
      run: |
        echo "âœ… Tests completed successfully"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage/coverage-final.json
        flags: unittests
        name: codecov-umbrella

  build-and-push:
    needs: [ lint, test ]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')

    steps:
    - name: Checkout deployment repository
      uses: actions/checkout@v4
      with:
        repository: 'Vuhuydiet/smartrent-deploy'
        token: ${{ secrets.DEPLOY_REPO_TOKEN }}
        path: 'deploy-repo'

    - name: Set environment variables
      id: env
      run: |
        COMMIT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
        ENVIRONMENT=$([[ "${GITHUB_REF}" == "refs/heads/main" ]] && echo "prd" || echo "dev")
        VALUES_FILE="charts/smartrent/environments/${ENVIRONMENT}/values.yaml"

        echo "commit-sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        echo "values-file=$VALUES_FILE" >> $GITHUB_OUTPUT

    - name: Update image tags in values.yaml
      run: |
        echo "Updating image tags to: ${{ steps.env.outputs.commit-sha }} for environment: ${{ steps.env.outputs.environment }}"

        sed -i '/^ScraperServer:/,/^[A-Za-z]/ s/^    tag: .*/    tag: ${{ github.ref_name }}-${{ steps.env.outputs.commit-sha }}/' deploy-repo/${{ steps.env.outputs.values-file }}

        echo "Updated values.yaml content:"
        cat deploy-repo/${{ steps.env.outputs.values-file }}

    - name: Get commit info
      id: commit-info
      run: |
        echo "commit-message=${{ github.event.head_commit.message }}" >> $GITHUB_OUTPUT
        echo "commit-link=https://github.com/${{ github.repository }}/commit/${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: Commit and push changes
      run: |
        cd deploy-repo
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add ${{ steps.env.outputs.values-file }}

        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi

        COMMIT_MESSAGE="${{ steps.env.outputs.commit-sha }}: ${{ steps.commit-info.outputs.commit-message }} ${{ steps.commit-info.outputs.commit-link }}"
        git commit -m "$COMMIT_MESSAGE"
        git push
